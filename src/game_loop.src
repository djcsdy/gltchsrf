#include "text.hdr"
#include "noise.hdr"

.scope game_loop {
	; Initialize player position
	lda #$80
	sta player.x
	sta vic.s0x
	sta vic.s1x
	lda #0
	sta player.x + 1
	sta vic.sxmsb
	lda #80
	sta player.y
	sta vic.s0y
	
	; Initialize player sprites
	lda #$81
	sta $07f8
	lda #$80
	sta $07f9
	lda #2
	sta vic.smcm
	lda #vic.BLACK
	sta vic.s0c
	lda #vic.GREEN
	sta vic.s1c
	lda #vic.DARKGREY
	sta vic.smc0
	lda #vic.YELLOW
	sta vic.smc1
	lda #3
	sta vic.sen
	
	{
		; Wait for ready frames to be processed
		{
			lda screen.frames_ready
			bne _cont
		}
		
		; Wait for pending frames
		{
			lda screen.frames_pending
			beq _cont
		}
		sta zp.tmp
		
		; Calculate player movement speed
		asl
		clc
		adc zp.tmp
		sta zp.tmp+2
		
		; Move player
		lda cia1.pra
		sta zp.tmp+1
		{
			; Up
			and #1
			bne _break
			lda player.y
			sec
			sbc zp.tmp+2
			sta player.y
		}
		{
			; Down
			lda zp.tmp+1
			and #2
			bne _break
			lda player.y
			clc
			adc zp.tmp+2
			sta player.y
		}
		{
			; Left
			lda zp.tmp+1
			and #4
			bne _break
			lda player.x
			sec
			sbc zp.tmp+2
			sta player.x
			bcs _break
			dec player.x+1
		}
		{
			; Right
			lda zp.tmp+1
			and #8
			bne _break
			lda player.x
			clc
			adc zp.tmp+2
			sta player.x
			bcc _break
			inc player.x+1
		}
		
		; Update player sprite position
		lda player.x
		sta vic.s0x
		sta vic.s1x
		lda player.x + 1
		and #1
		sta zp.tmp+1
		asl
		ora zp.tmp+1
		sta vic.sxmsb
		lda player.y
		sta vic.s0y
		sta vic.s1y
		
		; Arbitrarily scroll one pixel per frame for now.
		{
			lda zp.tmp
			eor #$ff
			clc
			adc #$01
			clc
			adc screen.x
			sta screen.x
			bcs _break
			dec screen.x + 1
		}
		{
			bit screen.x + 1
			bmi negative
			
			positive:
			lda screen.x
			sec
			sbc #$40
			tax
			lda screen.x + 1
			sbc #$1
			bcc _break
			sta screen.x + 1
			stx screen.x
			jmp _break
			
			negative:
			lda screen.x
			clc
			adc #$40
			sta screen.x
			lda screen.x + 1
			adc #$1
			sta screen.x + 1
		}
		
		; Add stuff to edge of screen
		{
			lda screen.x
			and #7
			beq draw_chars
			jmp _break
			draw_chars:
			draw_chars_offset = * + 1
			ldx #00
#pybegin
for i in range(24):
  print "lda text + ", i, ",x"
  print "sta $0400 + ", (i*40), ",x"
  print "lda noise + ", i, ",x"
  print "sta $d800 + ", (i*40), ",x"
#pyend
			lda draw_chars_offset
			clc
			adc #1
			sta draw_chars_offset
			sec
			sbc #40
			bcs _break
			sta draw_chars_offset
		}
		
		; Mark frames ready
		lda zp.tmp
		sta screen.frames_ready
		
		jmp _cont
	}
	
	.align $100 $??
	
	sin: {
#pybegin
from math import sin, pi
max = 167
for i in range(256):
	print ".byte ", int(round((sin(pi*2*i/256) + 1)/2 * max))
#pyend
	}
	
	player.x = zp.game_loop.player.x
	player.y = zp.game_loop.player.y
}
